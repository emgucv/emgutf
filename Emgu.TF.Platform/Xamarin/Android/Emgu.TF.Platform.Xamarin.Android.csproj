<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{B2F6D900-AA34-49D2-98EE-3C9F8DD896F2}</ProjectGuid>
    <ProjectTypeGuids>{EFBA0AD7-5A72-4C68-AF49-83D382785DCF};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <TemplateGuid>{9ef11e43-1701-4396-8835-8392d57abb70}</TemplateGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Emgu.TF</RootNamespace>
    <AssemblyName>Emgu.TF.Platform.Xamarin.Android</AssemblyName>
    <FileAlignment>512</FileAlignment>
    <AndroidResgenFile>Resources\Resource.Designer.cs</AndroidResgenFile>
    <GenerateSerializationAssemblies>Off</GenerateSerializationAssemblies>
    <AndroidUseLatestPlatformSdk>false</AndroidUseLatestPlatformSdk>
    <TargetFrameworkVersion>v13.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup>
    <TFBinaryDir>$([System.IO.Path]::GetFullPath($(MSBuildThisFileDirectory)..\..\..\lib))</TFBinaryDir>
    <EmguTFDir>$(MSBuildThisFileDirectory)</EmguTFDir>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>portable</DebugType>
    <Optimize>false</Optimize>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <OutputPath>$(TFBinaryDir)\Build\$(AssemblyName)\$(Platform)\$(Configuration)\</OutputPath>
    <DocumentationFile>$(OutputPath)$(AssemblyName).xml</DocumentationFile>
    <GenerateSerializationAssemblies>On</GenerateSerializationAssemblies>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <OutputPath>$(TFBinaryDir)\Build\$(AssemblyName)\$(Platform)\$(Configuration)\</OutputPath>
    <DocumentationFile>$(OutputPath)$(AssemblyName).xml</DocumentationFile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <PlatformTarget>x86</PlatformTarget>
    <OutputPath>$(TFBinaryDir)\Build\$(AssemblyName)\$(Platform)\$(Configuration)\</OutputPath>
    <DocumentationFile>$(OutputPath)\$(AssemblyName).xml</DocumentationFile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <PlatformTarget>x86</PlatformTarget>
    <OutputPath>$(TFBinaryDir)\Build\$(AssemblyName)\$(Platform)\$(Configuration)\</OutputPath>
    <DocumentationFile>$(OutputPath)\$(AssemblyName).xml</DocumentationFile>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="Mono.Android" />
    <Reference Include="mscorlib" />
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <PropertyGroup>
    <EmguTFLinkTarget>Xamarin Android Library</EmguTFLinkTarget>
    <!-- 
        <EmguTFNativeArmeabi>$(TFBinaryDir)\android\armeabi\libtfextern.so</EmguTFNativeArmeabi>
		<EmguTFBuildAndroidArmeabi Condition="$(AndroidSupportedAbis.Contains('armeabi%3')) OR $(AndroidSupportedAbis.Contains('armeabi,')) OR $(AndroidSupportedAbis.Contains('armeabi;')) OR $(AndroidSupportedAbis.EndsWith('armeabi')) OR ('$(AndroidSupportedAbis)'=='' AND '$(Platform)'=='AnyCPU') OR ('$(Platform)'=='armeabi')">True</EmguTFBuildAndroidArmeabi>
        <EmguTFErrorMessage Condition="'$(EmguTFBuildAndroidArmeabi)'=='True' AND !Exists('$(EmguTFNativeArmeabi)')">This package do not contain necessary binary for $(EmguTFLinkTarget). Emgu TF for Android Commercial License is required. Armeabi is targeted, but file $(EmguTFNativeArmeabi) is missing.</EmguTFErrorMessage>
        <EmguTFDeployMessage Condition="'$(EmguTFBuildAndroidArmeabi)'=='True' AND Exists('$(EmguTFNativeArmeabi)')">$(EmguTFDeployMessage)armeabi </EmguTFDeployMessage> 
		-->
    <EmguTFNativeArmeabiv7a>$(TFBinaryDir)\android\armeabi-v7a\libtfextern.so</EmguTFNativeArmeabiv7a>
    <EmguTFBuildAndroidArmeabiv7a Condition="$(AndroidSupportedAbis.Contains('armeabi-v7a%3')) OR $(AndroidSupportedAbis.Contains('armeabi-v7a,')) OR $(AndroidSupportedAbis.Contains('armeabi-v7a;')) OR $(AndroidSupportedAbis.EndsWith('armeabi-v7a')) OR ('$(AndroidSupportedAbis)'=='' AND '$(Platform)'=='AnyCPU') OR ('$(Platform)'=='armeabi-v7a')">True</EmguTFBuildAndroidArmeabiv7a>
    <EmguTFErrorMessage Condition="'$(EmguTFBuildAndroidArmeabiv7a)'=='True' AND !Exists('$(EmguTFNativeArmeabiv7a)')">This package do not contain necessary binary for $(EmguTFLinkTarget). Emgu TF for Android Commercial License is required. Armeabi-v7a is targeted, but file $(EmguTFNativeArmeabiv7a) is missing.</EmguTFErrorMessage>
    <EmguTFDeployMessage Condition="'$(EmguTFBuildAndroidArmeabiv7a)'=='True' AND Exists('$(EmguTFNativeArmeabiv7a)')">$(EmguTFDeployMessage)armeabi-v7a </EmguTFDeployMessage>
    <EmguTFNativeArm64v8a>$(TFBinaryDir)\android\arm64-v8a\libtfextern.so</EmguTFNativeArm64v8a>
    <EmguTFBuildAndroidArm64v8a Condition="$(AndroidSupportedAbis.Contains('arm64-v8a%3')) OR $(AndroidSupportedAbis.Contains('arm64-v8a,')) OR $(AndroidSupportedAbis.EndsWith('arm64-v8a;')) OR $(AndroidSupportedAbis.EndsWith('arm64-v8a')) OR ('$(AndroidSupportedAbis)'=='' AND '$(Platform)'=='AnyCPU')  OR ('$(Platform)'=='arm64-v8a')">True</EmguTFBuildAndroidArm64v8a>
    <EmguTFErrorMessage Condition="'$(EmguTFBuildAndroidArm64v8a)'=='True' AND !Exists('$(EmguTFNativeArm64v8a)')">This package do not contain necessary binary for $(EmguTFLinkTarget). Emgu TF for Android Commercial License is required. Arm64-v8a is targeted, but file $(EmguTFNativeArm64v8a) is missing.</EmguTFErrorMessage>
    <EmguTFDeployMessage Condition="'$(EmguTFBuildAndroidArm64v8a)'=='True' AND Exists('$(EmguTFNativeArm64v8a)')">$(EmguTFDeployMessage)arm64-v8a </EmguTFDeployMessage>
    <EmguTFNativex86>$(TFBinaryDir)\android\x86\libtfextern.so</EmguTFNativex86>
    <EmguTFBuildAndroidx86 Condition="$(AndroidSupportedAbis.Contains('x86%3')) OR $(AndroidSupportedAbis.Contains('x86,')) OR $(AndroidSupportedAbis.Contains('x86;')) OR $(AndroidSupportedAbis.EndsWith('x86')) OR ('$(AndroidSupportedAbis)'=='' AND '$(Platform)'=='AnyCPU') OR ('$(Platform)'=='x86')">True</EmguTFBuildAndroidx86>
    <EmguTFErrorMessage Condition="'$(EmguTFBuildAndroidx86)'=='True' AND !Exists('$(EmguTFNativex86)')">This package do not contain necessary binary for $(EmguTFLinkTarget). Emgu TF for Android Commercial License is required. x86 is targeted, but file $(EmguTFNativex86) is missing.</EmguTFErrorMessage>
    <EmguTFDeployMessage Condition="'$(EmguTFBuildAndroidx86)'=='True' AND Exists('$(EmguTFNativex86)')">$(EmguTFDeployMessage)x86 </EmguTFDeployMessage>
    <EmguTFNativex8664>$(TFBinaryDir)\android\x86_64\libtfextern.so</EmguTFNativex8664>
    <EmguTFBuildAndroidx8664 Condition="$(AndroidSupportedAbis.Contains('x86_64%3')) OR $(AndroidSupportedAbis.Contains('x86_64,')) OR $(AndroidSupportedAbis.Contains('x86_64;')) OR $(AndroidSupportedAbis.EndsWith('x86_64')) OR ('$(AndroidSupportedAbis)'=='' AND '$(Platform)'=='AnyCPU') OR ('$(Platform)'=='x86_64')">True</EmguTFBuildAndroidx8664>
    <EmguTFErrorMessage Condition="'$(EmguTFBuildAndroidx8664)'=='True' AND !Exists('$(EmguTFNativex8664)')">This package do not contain necessary binary for $(EmguTFLinkTarget). Emgu TF for Android Commercial License is required. x86_64 is targeted, but file $(EmguTFNativex8664) is missing.</EmguTFErrorMessage>
    <EmguTFDeployMessage Condition="'$(EmguTFBuildAndroidx8664)'=='True' AND Exists('$(EmguTFNativex8664)')">$(EmguTFDeployMessage)x86_64 </EmguTFDeployMessage>
  </PropertyGroup>
  <!-- armeabi-v7a -->
  <ItemGroup Condition="'$(EmguTFBuildAndroidArmeabiv7a)'=='True' AND Exists('$(EmguTFNativeArmeabiv7a)')">
    <EmbeddedNativeLibrary Condition="'$(EmguTFLinkTarget)'=='Xamarin Android Library'" Include="$(EmguTFNativeArmeabiv7a)">
      <Link>lib\armeabi-v7a\libtfextern.so</Link>
    </EmbeddedNativeLibrary>
  </ItemGroup>
  <!-- arm64-v8a -->
  <ItemGroup Condition="'$(EmguTFBuildAndroidArm64v8a)'=='True' AND Exists('$(EmguTFNativeArm64v8a)')">
    <EmbeddedNativeLibrary Condition="'$(EmguTFLinkTarget)'=='Xamarin Android Library'" Include="$(EmguTFNativeArm64v8a)">
      <Link>lib\arm64-v8a\libtfextern.so</Link>
    </EmbeddedNativeLibrary>
  </ItemGroup>
  <!-- x86 -->
  <ItemGroup Condition="'$(EmguTFBuildAndroidx86)'=='True' AND Exists('$(EmguTFNativex86)')">
    <EmbeddedNativeLibrary Condition="'$(EmguTFLinkTarget)'=='Xamarin Android Library'" Include="$(EmguTFNativex86)">
      <Link>lib\x86\libtfextern.so</Link>
    </EmbeddedNativeLibrary>
  </ItemGroup>
  <!-- x86_64 -->
  <ItemGroup Condition="'$(EmguTFBuildAndroidx8664)'=='True' AND Exists('$(EmguTFNativex8664)')">
    <EmbeddedNativeLibrary Condition="'$(EmguTFLinkTarget)'=='Xamarin Android Library'" Include="$(EmguTFNativex8664)">
      <Link>lib\x86_64\libtfextern.so</Link>
    </EmbeddedNativeLibrary>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="..\..\..\CommonAssemblyInfo.cs">
      <Link>Properties\CommonAssemblyInfo.cs</Link>
    </Compile>
    <Compile Include="TfInvokeAndroid.cs" />
  </ItemGroup>
  <!--
  <ItemGroup>
    <PackageReference Include="Xamarin.Android.Support.v7.AppCompat" Version="28.0.0.3" />
  </ItemGroup>
  -->
  <ItemGroup>
    <ProjectReference Include="..\..\..\Emgu.TF\Emgu.TF.Netstandard\Emgu.TF.Netstandard.csproj">
      <Project>{c096e7e5-ab7f-4255-b4fc-d6fbe96cbfdf}</Project>
      <Name>Emgu.TF.Netstandard</Name>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(MSBuildExtensionsPath)\Xamarin\Android\Xamarin.Android.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
  <Target Name="EmguTFPackageBuildImports" BeforeTargets="PrepareForBuild">
    <Message Condition="'$(EmguTFLinkTarget)'!=''" Text="Emgu TF shared project compiling against $(EmguTFLinkTarget)" Importance="High" />
    <Error Text="'$(EmguTFErrorMessage)'" Condition="'$(EmguTFErrorMessage)'!=''" />
    <Message Text="Emgu TF Compiling with $(EmguTFDeployMessage)binary" Condition="'$(EmguTFDeployMessage)'!=''" Importance="High" />
    <Message Text="No native binary is deployed by the Emgu.TF.Runtime.Android project." Condition="'$(EmguTFDeployMessage)'==''" Importance="High" />
  </Target>
  <Target Name="AfterBuild">
    <Message Text="Copying $(OutputPath)$(AssemblyName).dll, $(OutputPath)$(AssemblyName).xml to $(TFBinaryDir)" Importance="high" />
    <Copy SourceFiles="$(OutputPath)$(AssemblyName).dll" DestinationFolder="$(TFBinaryDir)" ContinueOnError="true" />
    <Copy SourceFiles="$(OutputPath)$(AssemblyName).xml" DestinationFolder="$(TFBinaryDir)" ContinueOnError="true" />
  </Target>
</Project>